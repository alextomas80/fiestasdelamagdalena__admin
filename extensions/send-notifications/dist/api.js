const t=[{name:"send-notifications",config:({filter:t,action:o},{database:n,logger:e})=>{t("notifications.items.create",()=>{console.log("üì≤ ¬°Nueva notificaci√≥n")}),o("notifications.items.create",async({payload:t})=>{const{title:o,body:i}=t;try{await async function(t,o){await t("notifications_tokens").update({notified:!1}),o.info("üîÑ Marcados todos los tokens como 'Sin notificar'")}(n,e);const t=await async function(t,o){const n=await t("notifications_tokens").select("expoPushToken").where("isForTest",!0).where("status","published"),e=n.map(t=>t.expoPushToken).filter(t=>t.startsWith("ExponentPushToken"));return o.info(`üîπ ${e.length} tokens v√°lidos encontrados`),e}(n,e);if(!t.length)return;const s=t.map(t=>({to:t,title:o,body:i,sound:"default"})),{sentTokens:a,invalidTokens:c}=await async function(t,o,n){const e=100,i=[],s=[];for(let a=0;a<t.length;a+=e){const c=t.slice(a,a+e);let r;try{const t=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)});r=await t.json()}catch(t){n.error("‚ùå Error en fetch:",t);continue}r.data?.forEach((t,o)=>{const e=c[o].to;if("ok"===t.status)i.push(e);else{const o=t.details?.error||t.message||"Error desconocido";n.warn(`‚ùå Token con error (${o}): ${e}`),s.push(e)}})}return{sentTokens:i,invalidTokens:s}}(s,"https://exp.host/--/api/v2/push/send",e);a.length&&(await async function(t,o){await t("notifications_tokens").whereIn("expoPushToken",o).update({notified:!0})}(n,a),e.info(`‚úÖ Actualizados ${a.length} tokens como notificados`)),c.length&&(await n("notifications_tokens").whereIn("expoPushToken",c).update({notified:!1,status:"draft"}),e.info(`üßπ ${c.length} tokens con error actualizados a status "draft"`)),e.info(`‚úÖ Notificaci√≥n enviada a ${t.length} dispositivos.`)}catch(t){console.error("Error al enviar notificaciones:",t)}})}}],o=[],n=[];export{o as endpoints,t as hooks,n as operations};
